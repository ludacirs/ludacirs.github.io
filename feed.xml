<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ludacirs.github.io/</id><title>Dev Note</title><subtitle>프론트엔드 프론트 개발자 개발 기술 til 블로그 dev note</subtitle> <updated>2022-03-04T03:12:59+09:00</updated> <author> <name>ludacirs</name> <uri>https://ludacirs.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ludacirs.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://ludacirs.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 ludacirs </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>React Query</title><link href="https://ludacirs.github.io/posts/React_Query/" rel="alternate" type="text/html" title="React Query" /><published>2022-03-04T03:08:00+09:00</published> <updated>2022-03-04T03:08:00+09:00</updated> <id>https://ludacirs.github.io/posts/React_Query/</id> <content src="https://ludacirs.github.io/posts/React_Query/" /> <author> <name>ludacirs</name> </author> <category term="React" /> <category term="React-Query" /> <summary> React-Query 상태 분리하기 리액트를 다룰 때 상태를 이용해서 뷰를 렌더링한다. 프론트에서 표현하는 데이터가 많아지면서 상태도 상당히 늘어났다. 그중 대표적인 것이 서버에서 받아오는 데이터 이러한 데이터들은 보통 전역에서 관리해야되거나, 복잡한 로직을 가지고 있는 경우가 많기 때문에 상태관리 라이브러리의 힘을 빌리는 경우가 많다. 많은 경우 리덕스의 미들웨어를 사용해서 이를 해결해왔다. 이런 흐름으로 자연스럽게 API 통신을 위한 코드는 전역 상태관리 라이브러리(리덕스)에게 위임하는게 당연시 되어버렸는데 클라이언트 내부에서만 선언하고 다루어지며 항상 최신의 상태로 업데이트되어 뷰에 반영되는 상태와 서버 데이터의 스냅샷을 불러와서 최신임을 보장할 수 없고 모두가 다룰 수 있어 최신임... </summary> </entry> <entry><title>Redux</title><link href="https://ludacirs.github.io/posts/Redux/" rel="alternate" type="text/html" title="Redux" /><published>2022-02-24T03:44:00+09:00</published> <updated>2022-02-24T03:44:00+09:00</updated> <id>https://ludacirs.github.io/posts/Redux/</id> <content src="https://ludacirs.github.io/posts/Redux/" /> <author> <name>ludacirs</name> </author> <category term="React" /> <category term="Redux" /> <summary> Redux 리덕스는 이전에 블로그를 만들면서 살짝 다뤄본 적이 있는데 아무 생각없이 따라서 만들기만해서 사실 모르는 것에 가까워서 복습. 왜 사용해야할까? 사실 잘 모르겠다 리덕스를 이제서야 공부하는 이유 중 하나이기도 한데 여태까지 작업한 사이드 프로젝트에서는 context와 useReducer를 이용해서 충분히 상태관리가 가능했기 때문에 리덕스에 눈돌리지 않아서 계속 미루고 있었다 하지만 최근에 작업하는 프로젝트에 기능을 조금씩 붙이다보니 전역으로 관리해야할 상태가 늘어나고, Provider가 충첩되며, 서버에서 받아오는 데이터를 관리하기가 까다로워짐에 따라서 다른 상태관리 툴이 필요하다고 판단되어 눈이 조금씩 돌아가는 중 조금 공부하다 보니 최근에는 서버쪽 데이터를 React Quer... </summary> </entry> <entry><title>V8 엔진의 메모리 관리</title><link href="https://ludacirs.github.io/posts/V8_Memory/" rel="alternate" type="text/html" title="V8 엔진의 메모리 관리" /><published>2022-01-09T22:24:00+09:00</published> <updated>2022-01-09T22:24:00+09:00</updated> <id>https://ludacirs.github.io/posts/V8_Memory/</id> <content src="https://ludacirs.github.io/posts/V8_Memory/" /> <author> <name>ludacirs</name> </author> <category term="CS" /> <category term="Web" /> <summary> V8 메모리 관리 nodejs는 자바스크립트로 이루어져있고 자바스크립트는 V8엔진에 의해서 돌아간다 가비지 컬렉터의 작동하는 방식, 코드를 작성할 때 백그라운드에서 발생하는 일, 메모리가 해제되는 방식을 알아보자 메모리 영역 V8의 메모리공간을 Resident Set이라 부른다. 메모리 세그먼트는 아래와 같이 나뉜다 Code : 실행될 코드들 Stack : heap에 있는 object를 참조하는 포인터, 원시타입들이 있다. Heap : object, string, 클로저와 같은 레퍼런스 타입을 저장한다. 힙 새 영역(new space) 새 할당이 발생하는 영역, 대부분의 객체들이 여기에 있다. 잦은 GC가 발생하기 때문에 빠르게 GC될수 있도록 설... </summary> </entry> <entry><title>하드웨어 가속</title><link href="https://ludacirs.github.io/posts/%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4_%EA%B0%80%EC%86%8D/" rel="alternate" type="text/html" title="하드웨어 가속" /><published>2022-01-08T17:33:00+09:00</published> <updated>2022-01-08T17:33:00+09:00</updated> <id>https://ludacirs.github.io/posts/%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4_%EA%B0%80%EC%86%8D/</id> <content src="https://ludacirs.github.io/posts/%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4_%EA%B0%80%EC%86%8D/" /> <author> <name>ludacirs</name> </author> <category term="CS" /> <category term="Web" /> <summary> 하드웨어 가속 하드웨어 가속이란? 브라우저가 페이지를 렌더링하는 과정 중 CSSOM과 DOM 트리를 합쳐서 렌더 트리를 만든 뒤, 렌더 트리를 참조해 화면에 나타낼 부분을 Render Layer를 만드는데 이 과정에서 CPU가 아닌 GPU를 이용해 paint될 레이어들을 Graphics Layer로 분리한다. CPU가 아닌 하드웨어를 사용하기 때문에 하드웨어 가속 또는 GPU를 사용하기 때문에 GPU 가속이라고도 부른다. 가속 대상 렌더 트리에서 다음과 같은 속성을 가지고 있으면 Graphics Layer로 넘어간다. CSS 3D Transform(translate3d, preserve-3d 등)이나 perspective 속성이 적용된 경우 &amp;lt;video&amp;gt; 또는 &amp;lt;... </summary> </entry> <entry><title>CORS</title><link href="https://ludacirs.github.io/posts/CORS/" rel="alternate" type="text/html" title="CORS" /><published>2022-01-07T14:19:00+09:00</published> <updated>2022-01-07T14:19:00+09:00</updated> <id>https://ludacirs.github.io/posts/CORS/</id> <content src="https://ludacirs.github.io/posts/CORS/" /> <author> <name>ludacirs</name> </author> <category term="CS" /> <category term="Network" /> <summary> cors SOP (Same Origin Policy) SOP(동일 출처 정책)는 동일한 Origin에서만 나온 리소스와 상호작용하도록 하는 정책이다. Origin? 오리진이란 위 그림에서 알 수 있듯 URL 요소 중에 protocol와 host(hostname + port) 부분을 가르켜 origin이라고하는데 이 부분이 일치해야 동일한 출처 즉 Same Origin이라고 판단한다. 참고로 IE(Internet Explorer)브라우저에서는 동일 출처인지 판단할 때 port를 끼워서 판단하지 않고 protocol과 hostname만을 가지고 판단한다. 보안을 위해서 동일한 origin에서 가져온 리소스만 사용한다는 것은 알겠는데 그럼 웹 개발을 할 때 origin에 있는 리소스가 필요한... </summary> </entry> </feed>
